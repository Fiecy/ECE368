#include <stdio.h>
#include <stdlib.h>
#include "genome.h"
typedef struct {
	size_t n;
	size_t **mat;
}matrix;

typedef struct _find_array{
	_find_array prev;
	_find_array next;
	size_t value;
}TreeNode;

void _free_matrix(matrix* array) {
	size_t i = 0;
	for (i = 0; i < array->n; i++) {
		free(array->mat[i]);
	}
	free(array->mat);
	free(array);
}

void _print_array(int* array, int size_of_seq) {
	printf("inside array is: ");
	size_t i = 0;
	for(i = 0; i < size_of_seq; i++) {
		printf("%d ", array[i]);
	}
	printf("\n");
}

matrix* _create_matrix(size_t n) {
	matrix* test_matrix = malloc(sizeof(matrix));
	test_matrix->n = n;
	test_matrix->mat = malloc(test_matrix->n*sizeof(size_t*));
	size_t i = 0;
	for (i = 0; i < test_matrix->n; i++) {
		test_matrix->mat[i] = malloc(test_matrix->n*sizeof(size_t*));
	}
	return test_matrix;
}

matrix* _create_zero_matrix(size_t n) {
	matrix* test_matrix = malloc(sizeof(matrix));
	test_matrix->n = n;
	test_matrix->mat = malloc(test_matrix->n*sizeof(size_t*));
	size_t i = 0;
	size_t j = 0;
	for (i = 0; i < test_matrix->n; i++) {
		test_matrix->mat[i] = malloc(test_matrix->n*sizeof(size_t*));
	}
	for (i = 0; i < test_matrix->n; i++) {
		for (j = 0; j < test_matrix->n; j++) {
			test_matrix->mat[i][j] = 0;
		}
	}
	return test_matrix;
}

void _print_matrix(matrix* array) {
	printf("2D matrix:\n");
	size_t i = 0; size_t j = 0;
	for (i = 0; i < array->n; i++) {
		for (j = 0; j < array->n; j++) {
			printf(" %ld",(array->mat)[i][j]);
		}
		printf("\n");
	}
	printf("end matrix\n");
}

void _add_all_sequence(matrix* matrix1, int* array) {
	size_t i = 0;
	size_t j = 0;
	for (i = 0; i < matrix1->n; i++) {
		for (j = 0; j < i; j++) {
			matrix1->mat[array[i]-1][array[j]-1] = 0;
		}
	}
}

void _create_first_sequence(matrix* matrix1, int* array) {
	size_t i = 0;
	size_t j = 0;
	for (i = 0; i < matrix1->n; i++) {
		for (j = i; j < matrix1->n; j++) {
			matrix1->mat[array[i]-1][array[j]-1] = 1;
		}
		matrix1->mat[array[i]-1][array[i]-1] = 0;
	}
}

matrix* Load_From_File(char* filename, size_t* m, int** check_array) {
	FILE* ptr = fopen(filename, "r");
	int test = 1;
	size_t i = 0;
	size_t n = 0;

	test = fread(&n, sizeof(int), 1, ptr);
	test = fread(m, sizeof(int), 1, ptr);
	printf("test is %d, m = %zd, n = %zd\n",test, *m, n);

	matrix* matrix1 = _create_zero_matrix(n);
	matrix1->n = n;

	int* temp_array = malloc(sizeof(int) * n);
	test = fread(temp_array, sizeof(int)*n, 1, ptr);
	//printf("test is %d, array[0] is %d\n", test, temp_array[0]);
	_create_first_sequence(matrix1, temp_array);

	for (i = 1; i < *m; i++) {
		test = fread(temp_array, sizeof(int)*n, 1, ptr);
		//printf("test is %d, array[0] is %d\n", test, temp_array[0]);
		_add_all_sequence(matrix1, temp_array);		
	}	

	//free(temp_array);
	*check_array = temp_array;
	fclose(ptr);
	//_print_matrix(matrix1);
	return matrix1;
}

void _find_next(int** returned_array, matrix* standard_matrix, int* array, size_t* size_of_seq, size_t up, size_t down) {
/*
	if (up >= standard_matrix->n-1 || down > standard_matrix->n-1) {
		return;
	}
	if (array[up] < 5 && array[down] < 5) {
		printf("mat[4][2] = %zd                  arr[up] is %d, arr[down] is %d, up is %ld, down is %ld, value is %ld xxx\n", standard_matrix->mat[4][2], array[up]-1, array[down]-1,up, down, standard_matrix->mat[array[up]-1][array[down]-1]);
	}
	if (standard_matrix->mat[array[up]-1][array[down]-1] == 1) {
		//printf("successfully get in\n");
		//printf("mat[4][2] = %zd up is %d, down is %d\n", standard_matrix->mat[4][2], up, down);
		int* temp_array = malloc(sizeof(int) * standard_matrix->n);
		size_t i = 0;
		for (i = 0; i < *size_of_seq; i++) {
			temp_array[i] = (*returned_array)[i];
		}
		temp_array[*size_of_seq] = array[down];
		size_t temp_size = *size_of_seq + 1;
		_find_next(&temp_array, standard_matrix, array, &temp_size, down, down+1);
		//printf("before change size temp is %d, size is %d\n", temp_size, *size_of_seq);
		if (temp_size > *size_of_seq) {
			*size_of_seq = temp_size;

			//printf("                                                        Change  test size is %d\n", *size_of_seq);   

			free(*returned_array);
			*returned_array = temp_array;
			//_print_array(*returned_array, *size_of_seq);
		}
		else{
			free(temp_array);
		}
		if (down >= standard_matrix->n-1) {
			_find_next(returned_array, standard_matrix, array, size_of_seq, up+1, up+2);
		}
		else {
			_find_next(returned_array, standard_matrix, array, size_of_seq, up, down+1);
		}
	}
*/
	return;
}

void _find_longest(int** returned_array, matrix* standard_matrix, int* array, size_t* size_of_seq, size_t up, size_t down) {
	if (up >= standard_matrix->n-1 || (standard_matrix->n - up) <= *size_of_seq ) {
		return;
	}
// If 2nd num found, search 3rd num.
/*
	if (standard_matrix->mat[array[up]-1][array[down]-1] == 1) {
        printf("successfully get in\n");
        //printf("mat[4][2] = %zd up is %ld, down is %ld\n", standard_matrix->mat[4][2], up, down);
		int* temp_array = malloc(sizeof(int) * standard_matrix->n);
		temp_array[0] = array[up];
		temp_array[1] = array[down];
        //printf("test init\n");
        //_print_array(temp_array, 2);
		size_t temp_size = 2;
		size_t temp_up = down;
		size_t temp_down = down+1;
		_find_next(&temp_array, standard_matrix, array, &temp_size, temp_up, temp_down);
        //printf("before change size temp is %d, size is %d\n", temp_size, *size_of_seq);
		if (temp_size > *size_of_seq) {
			*size_of_seq = temp_size;
			printf("                                                        Change  test size is %ld\n", *size_of_seq);
			//printf("mat[4][2] = %zd up is %ld, down is %ld\n", standard_matrix->mat[4][2], up, down);
			free(*returned_array);
			*returned_array = temp_array;
			_print_array(*returned_array, *size_of_seq);
		}
		else{
			free(temp_array);
		}
	}
// No matter second number found or not, go next.
	//printf("size of seq is %d, down is %d\n", *size_of_seq, down);
	if ((down >= standard_matrix->n-1) || (*size_of_seq > (standard_matrix->n - down))) {
		//*up = *up + 1;
		_find_longest(returned_array, standard_matrix, array, size_of_seq, up+1, up + 2);
	}
	else{
		//*down = *down + 1;
		_find_longest(returned_array, standard_matrix, array, size_of_seq, up, down+1);
	}
*/
	//printf("end of func size is %d\n", *size_of_seq);
	size_t i = 0;
	size_t j = 0;
	for (i = 0; i < standard_matrix->n; i++) {
		


	}
}

int* Longest_conserved_gene_sequence(char *filename, int *size_of_seq) {

	size_t m = 0;
	int* check_array = NULL;
	matrix* standard_matrix = Load_From_File(filename, &m, &check_array);
	//_print_array(check_array, standard_matrix->n);
	_print_matrix(standard_matrix);
	printf("check matrix\n");
	//printf("mat[0, 85] is %ld\n", standard_matrix->mat[0][85]);

// initialize before find longest
	int* returned_array = malloc(sizeof(int) * standard_matrix->n);
	returned_array[0] = check_array[0];
	//int up = 0;
	//int down = 1;
	//*size_of_seq = 1;
	size_t temp_size = 1;
	printf("Matrix built successfully!\n");
	_find_longest(&returned_array, standard_matrix, check_array, &temp_size, 0, 1);
	*size_of_seq = temp_size;
	//printf("exit size is %d\n", *size_of_seq);

	//printf("print returned_array\n");
	//_print_array(returned_array, *size_of_seq);

	free(check_array);
	_free_matrix(standard_matrix);

	//free(returned_array);
/*
	int* numreturned = malloc(3*sizeof(int));
	numreturned[0] = 5;
	numreturned[1] = 2;
	numreturned[2] = 1;
*/
	return returned_array;
}
